-- Create Employ demorgraphic table
CREATE TABLE EmployeeDemographic
	(EmployeeID int, FirstName varchar(50), Lastname varchar(50), Age int, Gender varchar(50) ) ;

-- Create Employee Salary table
CREATE TABLE EmployeeSalary
	(EmployeeID int, JobTittle varchar(50), Salary int ) ;

-- Create Warehouse Employ demorgraphic table
CREATE TABLE WarehouseEmployeeDemographic
	(EmployeeID int, FirstName varchar(50), Lastname varchar(50), Age int, Gender varchar(50) );
	
-- Input Data

INSERT INTO EmployeeDemographic VALUES
	(1001, 'Bebe Zahara', 'Benet', 28, 'Male'),
	(1002, 'Victoria',  'Parker', 39, 'Female'),
	(1003,  'Raven', 'Raven',30, 'Male'),
	(1004, 'Jujubee', 'Should-have-won', 25, 'Female'),
	(1005, 'Raja', 'Raja', 36, 'Male'),
	(1006, 'Maila', 'Luzon', 28, 'Male'),
	(1007, 'Sangela', 'Hallelujah', 29, 'Female'),
	(1008, 'Sharon', 'Needles', 29, 'Male'),
	(1009,  'Chad', 'Michaels', 40, 'Male'),
	(1010, 'Jinkx', 'Monsoon', 25, 'Female');


INSERT INTO EmployeeSalary VALUES
	(1001, 'Saleman', 1200),
	(1002, 'Receptionist', 1000),
	(1003,  'HR', 1300),
	(1004, 'Buyer', 1500),
	(1005, 'Engineer', 1700),
	(1006, 'Product Manager', 2000),
	(1007, 'Accountant', 1800),
	(1008, 'Store Manager', 1300),
	(1009,  'IT Specialist', 1900),
	(1010, 'Recuitment', 1100);
	
INSERT INTO EmployeeDemographic VALUES
	(1011, 'Jim', 'Halpert', 28, 'Male'),
	(1012, 'Pam',  'Beesly', 29, 'Female'),
	(1013,  'Dwight', 'Schrute',30, 'Male'),
	(1014, 'Darryl', 'Philbin', 32, 'Male');

--Join
SELECT * 
FROM EmployeeDemographic
INNER JOIN EmployeeSalary
	ON EmployeeDemographic.EmployeeID = EmployeeSalary.EmployeeID;

-- Outer Join
SELECT * 
FROM EmployeeDemographic
FULL OUTER JOIN EmployeeSalary
	ON EmployeeDemographic.EmployeeID = EmployeeSalary.EmployeeID;

-- Left Join
SELECT * 
FROM EmployeeDemographic
LEFT OUTER JOIN EmployeeSalary
	ON EmployeeDemographic.EmployeeID = EmployeeSalary.EmployeeID;

--Right Join
SELECT * 
FROM EmployeeDemographic
Right OUTER JOIN EmployeeSalary
	ON EmployeeDemographic.EmployeeID = EmployeeSalary.EmployeeID;

--Union
SELECT * 
FROM EmployeeDemographic
UNION
SELECT * 
FROM WarehouseEmployeeDemographic;

--Union All
SELECT * 
FROM EmployeeDemographic
UNION ALL
SELECT * 
FROM WarehouseEmployeeDemographic
ORDER BY EmployeeID;

--Case
SELECT FirstName, LastName, Age,
CASE 
	WHEN Age > 30 THEN 'Over 30'
	WHEN Age BETWEEN 27 AND 31 THEN 'LATE 20'
	WHEN Age BETWEEN 25 AND 27 THEN 'LATE 20'
	ELSE 'Under 30'
END AS Mygroup
FROM EmployeeDemographic
WHERE AGE IS NOT NULL
ORDER BY Mygroup;

--CASE
SELECT FirstName, Lastname, JobTittle, Salary,
CASE 
	WHEN JobTittle = 'Saleman' THEN Salary*0.2
	WHEN JobTittle = 'Receptionist' THEN Salary*0.05
	WHEN JobTittle = 'HR' THEN Salary*0.02
	WHEN JobTittle = 'Buyer' THEN Salary*0.1
	WHEN JobTittle = 'Engineer' THEN Salary*0.15
	WHEN JobTittle = 'Product Manager' THEN Salary*0.17
	WHEN JobTittle = 'Accountant' THEN Salary*0.14
END AS Bonus
FROM EmployeeDemographic
JOIN EmployeeSalary
	ON EmployeeDemographic.EmployeeID = EmployeeSalary.EmployeeID;
	
-- HAVING
SELECT JobTittle, COUNT(JobTittle)
FROM EmployeeDemographic
JOIN EmployeeSalary
	ON EmployeeDemographic.EmployeeID = EmployeeSalary.EmployeeID
GROUP BY JobTittle
HAVING COUNT(JobTittle) > 1;


SELECT JobTittle, AVG(Salary)
FROM EmployeeDemographic
JOIN EmployeeSalary
	ON EmployeeDemographic.EmployeeID = EmployeeSalary.EmployeeID
GROUP BY JobTittle
HAVING AVG(Salary) > 1500;


-- UPDATE ROWS

UPDATE EmployeeDemographic
SET EmployeeID = 1018
WHERE FirstName = 'Victoria' AND Lastname = 'Parker';

-- DELETE ROWS
SELECT *
FROM EmployeeDemographic
WHERE EmployeeID = 1018

DELETE FROM EmployeeDemographic
WHERE EmployeeID = 1018


-- Partition By
SELECT FirstName, LastName, Gender, Salary,
	COUNT(Gender) OVER (PARTITION BY Gender) AS TotalGender
FROM EmployeeSalary sal
JOIN EmployeeDemographic dem
ON sal.EmployeeID = dem.EmployeeID
ORDER BY TotalGender;

--CTEs
WITH CTE_Employee AS 
	(SELECT FirstName, LastName, Gender, Salary,
		COUNT(Gender) OVER (PARTITION BY Gender) AS TotalGender
		FROM EmployeeSalary sal
		JOIN EmployeeDemographic dem
		ON sal.EmployeeID = dem.EmployeeID
		WHERE Salary > 1500
	)
SELECT FirstName
FROM CTE_Employee;

-- Temp Table
DROP TABLE IF EXISTS #temp_Employee
CREATE TABLE #temp_Employee (
	JobTitle varchar(50),
	EmployeePerJob int,
	AvgAge int,
	AvgSalary int)
INSERT INTO #temp_Employee 
	SELECT JobTittle, count(dem.EmployeeID), AVG(Age), AVG(Salary)
	FROM EmployeeDemographic dem
	JOIN EmployeeSalary sal
	ON dem.EmployeeID = sal.EmployeeID
	GROUP BY JobTittle
SELECT * 
FROM #temp_Employee 

-- String Function

-- Create new table for String Function example
CREATE TABLE EmployeeError (EmployeeID varchar(50), FirstName varchar(50), Lastname varchar(50)); 
Insert into EmployeeError Values
	('1002   ', 'Maurice', 'Mose' ),
	('   1004', 'Jen', 'Barber'),
	('   1005   ', 'ROy', 'ODowd - Fired')

-- Trim, Ltrim, RTrim
SELECT EmployeeID, TRIM(EmployeeID) AS IDTRIM
FROM EmployeeError;

SELECT EmployeeID, LTRIM(EmployeeID) AS IDTRIM
FROM EmployeeError;

SELECT EmployeeID, RTRIM(EmployeeID) AS IDTRIM
FROM EmployeeError;

-- Replace
SELECT Lastname, REPLACE(Lastname,'- Fired','') AS LastNameFixed
FROM EmployeeError;

--Substring
SELECT err.EmployeeID, dem.FirstName
FROM EmployeeError err
JOIN EmployeeDemographic dem
	ON SUBSTRING(dem.FirstName,1,3) = SUBSTRING(err.FirstName,1,3) ;

--Upper & Lower 
SELECT FirstName, Upper(FirstName) AS NameUpper, Lower(FirstName) AS NameLower
FROM EmployeeError;


--Stored Procedures 
CREATE PROCEDURE TEST
AS 
SELECT *
FROM EmployeeDemographic;

EXEC TEST;

CREATE PROCEDURE Create_Temp_employee
AS
DROP TABLE IF EXISTS #temp_Employee
CREATE TABLE #temp_Employee (
	JobTitle varchar(50),
	EmployeePerJob int,
	AvgAge int,
	AvgSalary int)
INSERT INTO #temp_Employee 
	SELECT JobTittle, count(dem.EmployeeID), AVG(Age), AVG(Salary)
	FROM EmployeeDemographic dem
	JOIN EmployeeSalary sal
	ON dem.EmployeeID = sal.EmployeeID
	GROUP BY JobTittle
SELECT * 
FROM #temp_Employee;

EXEC Create_Temp_employee;

--Subqueries

--Subqueries in Select
SELECT EmployeeID, Salary,
	(SELECT AVG(Salary) FROM EmployeeSalary) AS AllAvgSalary
FROM EmployeeSalary

-- Subqueries in FROM
SELECT a.EmployeeID, AllAvgSalary
FROM (SELECT EmployeeID, Salary, AVG(Salary) over () as AllAvgSalary
		FROM EmployeeSalary) a;

--Subqueries in From

SELECT EmployeeID, JobTittle, Salary
FROM EmployeeSalary
WHERE EmployeeID IN(
	SELECT EmployeeID
	FROM EmployeeDemographic
	WHERE Age > 30);

